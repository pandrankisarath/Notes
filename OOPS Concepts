OOPS Concept:

1) Abstraction :
 It shows essential features and ignoring unnecessary details.
 It focuses on what an object does rather than how it achieves it.
 It is a powerful concept that allows developers to create models, manage complexity, and design systems that are easier to understand and maintain.
 It is a key principle in various disciplines in software development.

2)Polymorphism: (Many-Forms)
 In programming, a single method or interface can work with different classes.
 Polymorphism enables code reusability, flexibility, and abstraction by allowing different classes to be treated uniformly through a common interface or base class.
 It is a fundamental concept in object-oriented design.

 Two types - 1.Compile time Polymorphism also known as Static Polymorphism
            2.Runtime Polymorphism also known as dynamic Polymorphism

 Example: A universal remote control that can operate various devices.

3)Inheritance:
 It promotes code organization, reuse, and the creation of well-structured class hierarchies in object-oriented programming.
 Inheritance, along with polymorphism, allows objects of the derived class to be treated as objects of the base class.
 This enables flexibility and dynamic behavior in the code.
 To inherit properties and behaviors from one class to another class.
 A subclass inheriting from a superclass.
 The "extends" keyword is used to indicate inheritance between classes. Additionally, the "super" keyword is used to refer to the superclass from within the subclass.


4)Encapsulation:
 Encapsulation in Java is the practice of bundling data (attributes) and the methods (functions) that operate on the data into a single unit, known as a class.
 It involves hiding the internal implementation details of an object and exposing only what is necessary.
 This is achieved by making the attributes of a class private or protected, preventing direct access from outside the class.

Encapsulation, along with abstraction, inheritance, and polymorphism, is a fundamental concept in OOP.
It promotes the creation of modular, reusable, and maintainable code by providing a clear separation between the internal workings of an object and its external interface.
